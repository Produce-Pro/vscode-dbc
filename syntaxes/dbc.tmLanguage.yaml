---
name: dbc
scopeName: source.dbc
version: '0.0.1'
patterns:
- include: '#prototype'
- include: '#main'
repository:
  prototype:
    patterns:
    - include: '#line-comments'
    - include: '#strings'
  main:
    patterns:
    - include: '#variable-definitions'

# COMMENTS
  # Comments begin with a [# .] and finish at the end of the line
  line-comments:
    patterns:
    - name: comment.line.dbc
      begin: '^[\.\*\+]'
      end: '(?<!^)$\n'

  # Comments after a statement
  eol-comments:
    patterns:
    - begin: '[ \t]+[\.\*\+]'
      name: comment.line.dbc
      end: '(?<!^)(?<!:)(?<!\n)(?=\n)'
  # Comments after variable declaration treated as a comment
  eol-comments-catchall:
    patterns:
    - begin: '[ \t]+*'
      name: comment.line.dbc
      end: '(?<!^)(?<!:)(?<!\n)(?=\n)'

# STRINGS
  strings:
    patterns:
    - begin: '"'
      beginCaptures:
        '0':
          name: punctuation.definition.string.begin.dbc
      end: '"'
      endCaptures:
        '0':
          name: punctuation.definition.string.end.dbc
      name: string.quoted.double.dbc
      patterns:
      - match: '#.'
        name: constant.character.escape.dbc

# CONSTANTS
  # Flags
  flag-constants:
    patterns:
    - match: '((?i)not|eos|over|equal|less|zero)(?![[:alnum:]_\$\.@])'
      name: constant.language.dbc

  # Numbers
  number-constants:
    patterns:
    - match: '(-)?(([0-9]+\.[0-9]+)|(\.[0-9]+)|([0-9]+))(?![[:alnum:]_\$\.@])'
      name: constant.numeric.dbc

  # Operand Seperators
  operand-seperators:
    patterns:
    - match: '([ \t]+((?i)by|to|of|from|using|with|in|into)[ \t]+|[ \t]*,)'
      name: support.type.dbc

# VARIABLES DEFINITIONS
  variable-definitions:
    patterns:
    - include: '#standard-types'
    - include: '#label-types'
    - include: '#list-types'
    - include: '#file-types'
    - include: '#varlist-types'

  # Array brackets
  brackets:
    patterns:
    - begin: '\['
      name: meta.brackets.dbc
      patterns:
      - include: '#arguments'
      end: '\]'

  # Define a variable on definition
  type-definition:
    patterns:
    - begin: '([ \t]+((?i)by|to|of|from|using|with|in|into)[ \t]+|[ \t]*,|:\n)'
      beginCaptures:
        1: { name: support.type.dbc }
      name: meta.storage.define
      patterns:
      - match: '([ \t]*((?i)initial))'
        name: storage.modifier.dbc
      - include: '#arguments'
      - include: '#eol-comments'
      end: '(?<!^)(?<!:)(?<!\n)(?=\n)'
    - include: '#address-types'
    - include: '#arguments'

  address-types:
    patterns:
    - match: '@'
      name: storage.modifier.dbc

  # VARIABLE DEFINITIONS (STANDARD)
  standard-types:
    patterns:
    - include: '#constant-types'
    - include: '#character-types'
    - include: '#numeric-types'
    - include: '#var-types'

  # Constant variables
  constant-types:
    patterns:
    - begin: '^([[:alpha:]_\$][[:alnum:]_\.\$@]*)[ \t]+((?i)define|equ)[ \t]+'
      beginCaptures:
        1: { name: entity.name.type.constant.dbc }
        2: { name: storage.type.dbc }
      name: meta.storage.constant.dbc
      patterns:
      - include: '#number-constants'
      - include: "#arguments"
      - include: '#eol-comments-catchall'
      end: '(?<!^)(?<!:)(?<!\n)\n'

  # Character variables
  character-types:
    patterns:
    - begin: '^([[:alpha:]_\$][[:alnum:]_\.\$@]*)[ \t]+((?i)char|dim|init|gchar)[ \t]+'
      beginCaptures:
        1: { name: entity.name.type.char.dbc }
        2: { name: storage.type.dbc }
      name: meta.storage.char.dbc
      patterns:
      - include: '#brackets'
      - include: '#type-definition'
      - include: '#eol-comments-catchall'
      end: '(?<!^)(?<!:)(?<!\n)\n'

  # Numeric variables
  numeric-types:
    patterns:
    - begin: '^([[:alpha:]_\$][[:alnum:]_\.\$@]*)[ \t]+((?i)form|num|int|float|gform|gnum)[ \t]+'
      beginCaptures:
        1: { name: entity.name.type.form.dbc }
        2: { name: storage.type.dbc }
      name: meta.storage.form.dbc
      patterns:
      - include: '#brackets'
      - include: '#type-definition'
      - include: '#eol-comments-catchall'
      end: '(?<!^)(?<!:)(?<!\n)\n'

  # Variable (any) variables
  var-types:
    patterns:
    - begin: '^([[:alpha:]_\$][[:alnum:]_\.\$@]*)[ \t]+((?i)var)[ \t]+'
      beginCaptures:
        1: { name: entity.name.type.var.dbc }
        2: { name: storage.type.dbc }
      name: meta.storage.var.dbc
      patterns:
      - include: '#brackets'
      - include: '#type-definition'
      - include: '#eol-comments-catchall'
      end: '(?<!^)(?<!:)(?<!\n)\n'


  # VARIABLE DEFINITIONS (LABELS)
  label-types:
    patterns:
    - begin: '^([[:alpha:]_\$][[:alnum:]_\.\$@]*)[ \t]+((?i)external|label)[ \t]*'
      beginCaptures:
        1: { name: entity.name.function.var.dbc }
        2: { name: storage.type.dbc }
      name: meta.storage.function.dbc
      patterns:
      - include: '#brackets'
      - include: '#type-definition'
      - include: '#eol-comments-catchall'
      end: '(?<!^)(?<!:)(?<!\n)\n'

  # VARIABLE DEFINITIONS (LIST)
  list-types:
    patterns:
    - match: '^([[:alpha:]_\$][[:alnum:]_\.\$@]*)[ \t]+((?i)list)[ \t]+(@)'
      captures:
        1: { name: entity.name.type.list.dbc }
        2: { name: storage.type.dbc }
        3: { name: storage.modifier.dbc }
    - begin: '^([[:alpha:]_\$][[:alnum:]_\.\$@]*)[ \t]+((?i)list)'
      beginCaptures:
        1: { name: entity.name.type.list.dbc }
        2: { name: storage.modifier.dbc }
      name: meta.list.dbc
      patterns:
      - include: '#standard-types'
      - include: '#prototype'
      end: '^[ \t]+((?i)listend)(([ \t]*\n)|([ \t]+.*\n))'
      endCaptures:
        1: { name: storage.modifier.dbc }
        4: { name: comment.line.dbc }
  
  # VARIABLE DEFINITIONS (FILES)
  file-types:
    patterns:
    - begin: '^([[:alpha:]_\$][[:alnum:]_\.\$@]*)[ \t]+((?i)file|ifile|afile|pfile|comfile)[ \t]*'
      beginCaptures:
        1: { name: entity.name.interface.dbc }
        2: { name: storage.type.dbc }
      name: meta.storage.interface.dbc
      patterns:
      - include: '#address-types'
      - include: '#arguments'
      end: '(?<!^)(?<!:)(?<!\n)\n'

  # VARIABLE DEFINITIONS (VARLIST)
  varlist-types:
    patterns:
    - begin: '^([[:alpha:]_\$][[:alnum:]_\.\$@]*)[ \t]+((?i)varlist)[ \t]*'
      beginCaptures:
        1: { name: entity.name.type.varlist.dbc }
        2: { name: storage.type.dbc }
      name: meta.storage.varlist.dbc
      patterns:
      - include: '#address-types'
      - include: '#arguments'
      end: '(?<!^)(?<!:)(?<!\n)\n'


# STATEMENTS

  # Multiple arguments with multiline support
  arguments:
    patterns:
    - begin: '([ \t]*:\n)'
      beginCaptures:
        1: { name: support.type.dbc }
      name: meta.arguments.dbc
      patterns:
      - include: '#argument'
      - include: '#operand-seperators'
      end: '(?<!^)(?<!:)(?<!\n)(?=\n)'
    - include: '#argument'
    - include: '#operand-seperators'
    
  
  # Any single parameters/inputs
  argument:
    patterns:
    - match: '~([[:alpha:]_\$][[:alnum:]_\.\$@]*)'
      name: variable.function.dbc
    - match: '([[:alpha:]_\$][[:alnum:]_\.\$@]*)(\=)'
      captures: 
        1: { name: variable.parameter.dbc }
        2: { name: keyword operator.assignment.dbc }
    - match: '([[:alpha:]_\$][[:alnum:]_\.\$@]*)'
      name: variable.other.dbc
      patterns:
      - include: '#brackets'
    - include: '#number-constants'
    - include: '#prototype'




