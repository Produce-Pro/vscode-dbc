{
  "name": "dbc",
  "scopeName": "source.dbc",
  "version": "0.0.1",
  "patterns": [
    {
      "include": "#prototype"
    },
    {
      "include": "#main"
    }
  ],
  "repository": {
    "prototype": {
      "patterns": [
        {
          "include": "#line-comments"
        },
        {
          "include": "#strings"
        }
      ]
    },
    "main": {
      "patterns": [
        {
          "include": "#variable-definitions"
        },
        {
          "include": "#verb-definition"
        }
      ]
    },
    "line-comments": {
      "patterns": [
        {
          "name": "comment.line.dbc",
          "begin": "^[\\.\\*\\+]",
          "end": "(?<!^)$\\n"
        }
      ]
    },
    "eol-comments": {
      "patterns": [
        {
          "begin": "[ \\t]+[\\.\\*\\+]",
          "name": "comment.line.dbc",
          "end": "(?<!^)(?<!:)(?<!\\n)(?=\\n)"
        }
      ]
    },
    "eol-comments-catchall": {
      "patterns": [
        {
          "begin": "[ \\t]+*",
          "name": "comment.line.dbc",
          "end": "(?<!^)(?<!:)(?<!\\n)(?=\\n)"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.dbc"
            }
          },
          "end": "[\"\\n]",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.dbc"
            }
          },
          "name": "string.quoted.double.dbc",
          "patterns": [
            {
              "match": "#.",
              "name": "constant.character.escape.dbc"
            }
          ]
        }
      ]
    },
    "flag-constants": {
      "patterns": [
        {
          "match": "[ \\t]*((?i)not|eos|over|equal|less|zero)(?![[:alnum:]_\\$\\.@])",
          "captures": {
            "1": {
              "name": "constant.language.dbc"
            }
          }
        }
      ]
    },
    "number-constants": {
      "patterns": [
        {
          "match": "[ \\t]*((-)?(([0-9]+\\.[0-9]+)|(\\.[0-9]+)|([0-9]+))(?![[:alnum:]_\\$\\.@]))",
          "captures": {
            "1": {
              "name": "constant.numeric.dbc"
            }
          }
        }
      ]
    },
    "operand-arithmetic": {
      "patterns": [
        {
          "match": "[ \\t]*(\\+|-|/|%|\\||\\^|~|!|\\*)",
          "captures": {
            "1": {
              "name": "keyword.operator.arithmetic.dbc"
            }
          }
        }
      ]
    },
    "operand-seperators": {
      "patterns": [
        {
          "match": "([ \\t]+((?i)by|to|of|from|using|with|in|into)[ \\t]+|[ \\t]*,)",
          "captures": {
            "1": {
              "name": "support.type.dbc"
            }
          }
        }
      ]
    },
    "operand-altertype": {
      "patterns": [
        {
          "match": "((?i)(sqznum|form|char|squeeze|trim|size|length|chop))",
          "name": "support.function.builtin.dbc"
        }
      ]
    },
    "variable-definitions": {
      "patterns": [
        {
          "include": "#standard-types"
        },
        {
          "include": "#label-types"
        },
        {
          "include": "#list-types"
        },
        {
          "include": "#file-types"
        },
        {
          "include": "#varlist-types"
        }
      ]
    },
    "brackets": {
      "patterns": [
        {
          "begin": "\\[",
          "name": "meta.brackets.dbc",
          "patterns": [
            {
              "include": "#arguments"
            }
          ],
          "end": "\\]"
        }
      ]
    },
    "type-definition": {
      "patterns": [
        {
          "begin": "([ \\t]+((?i)by|to|of|from|using|with|in|into)[ \\t]+|[ \\t]*,|:\\n)",
          "beginCaptures": {
            "1": {
              "name": "support.type.dbc"
            }
          },
          "name": "meta.storage.define",
          "patterns": [
            {
              "match": "([ \\t]*((?i)initial))",
              "name": "storage.modifier.dbc"
            },
            {
              "include": "#arguments"
            },
            {
              "include": "#eol-comments"
            }
          ],
          "end": "(?<!^)(?<!:)(?<!\\n)(?=\\n)"
        },
        {
          "include": "#address-types"
        },
        {
          "include": "#arguments"
        }
      ]
    },
    "address-types": {
      "patterns": [
        {
          "match": "@",
          "name": "storage.modifier.dbc"
        }
      ]
    },
    "standard-types": {
      "patterns": [
        {
          "include": "#constant-types"
        },
        {
          "include": "#character-types"
        },
        {
          "include": "#numeric-types"
        },
        {
          "include": "#var-types"
        }
      ]
    },
    "constant-types": {
      "patterns": [
        {
          "begin": "^([[:alpha:]_\\$][[:alnum:]_\\.\\$@]*)[ \\t]+((?i)define|equ)[ \\t]+",
          "beginCaptures": {
            "1": {
              "name": "entity.name.type.constant.dbc"
            },
            "2": {
              "name": "storage.type.dbc"
            }
          },
          "name": "meta.storage.constant.dbc",
          "patterns": [
            {
              "include": "#number-constants"
            },
            {
              "include": "#arguments"
            },
            {
              "include": "#eol-comments-catchall"
            }
          ],
          "end": "(?<!^)(?<!:)(?<!\\n)\\n"
        }
      ]
    },
    "character-types": {
      "patterns": [
        {
          "begin": "^([[:alpha:]_\\$][[:alnum:]_\\.\\$@]*)[ \\t]+((?i)char|dim|init|gchar)[ \\t]+",
          "beginCaptures": {
            "1": {
              "name": "entity.name.type.char.dbc"
            },
            "2": {
              "name": "storage.type.dbc"
            }
          },
          "name": "meta.storage.char.dbc",
          "patterns": [
            {
              "include": "#brackets"
            },
            {
              "include": "#type-definition"
            },
            {
              "include": "#eol-comments-catchall"
            }
          ],
          "end": "(?<!^)(?<!:)(?<!\\n)\\n"
        }
      ]
    },
    "numeric-types": {
      "patterns": [
        {
          "begin": "^([[:alpha:]_\\$][[:alnum:]_\\.\\$@]*)[ \\t]+((?i)form|num|int|float|gform|gnum)[ \\t]+",
          "beginCaptures": {
            "1": {
              "name": "entity.name.type.form.dbc"
            },
            "2": {
              "name": "storage.type.dbc"
            }
          },
          "name": "meta.storage.form.dbc",
          "patterns": [
            {
              "include": "#brackets"
            },
            {
              "include": "#type-definition"
            },
            {
              "include": "#eol-comments-catchall"
            }
          ],
          "end": "(?<!^)(?<!:)(?<!\\n)\\n"
        }
      ]
    },
    "var-types": {
      "patterns": [
        {
          "begin": "^([[:alpha:]_\\$][[:alnum:]_\\.\\$@]*)[ \\t]+((?i)var)[ \\t]+",
          "beginCaptures": {
            "1": {
              "name": "entity.name.type.var.dbc"
            },
            "2": {
              "name": "storage.type.dbc"
            }
          },
          "name": "meta.storage.var.dbc",
          "patterns": [
            {
              "include": "#brackets"
            },
            {
              "include": "#type-definition"
            },
            {
              "include": "#eol-comments-catchall"
            }
          ],
          "end": "(?<!^)(?<!:)(?<!\\n)\\n"
        }
      ]
    },
    "label-types": {
      "patterns": [
        {
          "begin": "^([[:alpha:]_\\$][[:alnum:]_\\.\\$@]*)[ \\t]+((?i)external|label)[ \\t]*",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.var.dbc"
            },
            "2": {
              "name": "storage.type.dbc"
            }
          },
          "name": "meta.storage.function.dbc",
          "patterns": [
            {
              "include": "#brackets"
            },
            {
              "include": "#type-definition"
            },
            {
              "include": "#eol-comments-catchall"
            }
          ],
          "end": "(?<!^)(?<!:)(?<!\\n)\\n"
        }
      ]
    },
    "list-types": {
      "patterns": [
        {
          "match": "^([[:alpha:]_\\$][[:alnum:]_\\.\\$@]*)[ \\t]+((?i)list)[ \\t]+(@)",
          "captures": {
            "1": {
              "name": "entity.name.type.list.dbc"
            },
            "2": {
              "name": "storage.type.dbc"
            },
            "3": {
              "name": "storage.modifier.dbc"
            }
          }
        },
        {
          "begin": "^([[:alpha:]_\\$][[:alnum:]_\\.\\$@]*)[ \\t]+((?i)list)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.type.list.dbc"
            },
            "2": {
              "name": "storage.modifier.dbc"
            }
          },
          "name": "meta.list.dbc",
          "patterns": [
            {
              "include": "#standard-types"
            },
            {
              "include": "#prototype"
            }
          ],
          "end": "^[ \\t]+((?i)listend)(([ \\t]*\\n)|([ \\t]+.*\\n))",
          "endCaptures": {
            "1": {
              "name": "storage.modifier.dbc"
            },
            "4": {
              "name": "comment.line.dbc"
            }
          }
        }
      ]
    },
    "file-types": {
      "patterns": [
        {
          "begin": "^([[:alpha:]_\\$][[:alnum:]_\\.\\$@]*)[ \\t]+((?i)file|ifile|afile|pfile|comfile)[ \\t]*",
          "beginCaptures": {
            "1": {
              "name": "entity.name.interface.dbc"
            },
            "2": {
              "name": "storage.type.dbc"
            }
          },
          "name": "meta.storage.interface.dbc",
          "patterns": [
            {
              "include": "#address-types"
            },
            {
              "include": "#arguments"
            }
          ],
          "end": "(?<!^)(?<!:)(?<!\\n)\\n"
        }
      ]
    },
    "varlist-types": {
      "patterns": [
        {
          "begin": "^([[:alpha:]_\\$][[:alnum:]_\\.\\$@]*)[ \\t]+((?i)varlist)[ \\t]*",
          "beginCaptures": {
            "1": {
              "name": "entity.name.type.varlist.dbc"
            },
            "2": {
              "name": "storage.type.dbc"
            }
          },
          "name": "meta.storage.varlist.dbc",
          "patterns": [
            {
              "include": "#address-types"
            },
            {
              "include": "#arguments"
            }
          ],
          "end": "(?<!^)(?<!:)(?<!\\n)\\n"
        }
      ]
    },
    "verb-definition": {
      "patterns": [
        {
          "begin": "^([[:alpha:]_\\$][[:alnum:]_\\.\\$@]*)[ \\t]+((?i)verb)[ \\t]*",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.verb.dbc"
            },
            "2": {
              "name": "storage.type.verb.dbc"
            }
          },
          "name": "meta.function.parameters.dbc",
          "patterns": [
            {
              "include": "#verb-definition-parameters"
            }
          ],
          "end": "(?<!^)(?<!:)(?<!\\n)\\n"
        }
      ]
    },
    "verb-definition-parameters": {
      "patterns": [
        {
          "begin": "([ \\t]*:\\n)",
          "beginCaptures": {
            "1": {
              "name": "support.type.dbc"
            }
          },
          "patterns": [
            {
              "include": "#verb-definition-param"
            },
            {
              "include": "#operand-seperators"
            }
          ],
          "end": "(?<!^)(?<!:)(?<!\\n)(?=\\n)"
        },
        {
          "include": "#verb-definition-param"
        },
        {
          "include": "#operand-seperators"
        }
      ]
    },
    "verb-definition-param": {
      "patterns": [
        {
          "match": "([[:alpha:]_\\$][[:alnum:]_\\.\\$@]*)*([\\#\\=])\\b((?i)(array|afile|any|carray|carray1|carray2|carray3|cnvar|cnvarlit|comfile|cvar|cvarlit|device|file|ifile|image|list|label|nvar|nvarlit|varlit)\\b)",
          "captures": {
            "1": {
              "name": "variable.parameter.dbc"
            },
            "2": {
              "name": "keyword operator.assignment.dbc"
            },
            "3": {
              "name": "support.type.dbc"
            }
          }
        },
        {
          "include": "#prototype"
        }
      ]
    },
    "arguments": {
      "patterns": [
        {
          "begin": "([ \\t]*:\\n)",
          "beginCaptures": {
            "1": {
              "name": "support.type.dbc"
            }
          },
          "patterns": [
            {
              "include": "#argument"
            },
            {
              "include": "#operand-seperators"
            }
          ],
          "end": "(?<!^)(?<!:)(?<!\\n)(?=\\n)"
        },
        {
          "include": "#argument"
        },
        {
          "include": "#operand-seperators"
        }
      ]
    },
    "argument": {
      "patterns": [
        {
          "match": "~([[:alpha:]_\\$][[:alnum:]_\\.\\$@]*)",
          "name": "variable.function.dbc"
        },
        {
          "match": "([[:alpha:]_\\$][[:alnum:]_\\.\\$@]*)(\\=)",
          "captures": {
            "1": {
              "name": "variable.parameter.dbc"
            },
            "2": {
              "name": "keyword operator.assignment.dbc"
            }
          }
        },
        {
          "match": "([[:alpha:]_\\$][[:alnum:]_\\.\\$@]*)",
          "name": "variable.other.dbc",
          "patterns": [
            {
              "include": "#brackets"
            }
          ]
        },
        {
          "include": "#number-constants"
        },
        {
          "include": "#argument-parens"
        },
        {
          "include": "#prototype"
        }
      ]
    },
    "argument-parens": {
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "1": {
              "name": "punctuation.section.parentheses.begin.dbc"
            }
          },
          "name": "meta.argument.parens.dbc",
          "patterns": [
            {
              "include": "#operand-arithmetic"
            },
            {
              "include": "#operand-altertype"
            },
            {
              "include": "([ \\t]*:\\n)",
              "name": "support.type.dbc"
            },
            {
              "include": "#argument"
            }
          ],
          "end": "\\)",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.parentheses.end.dbc"
            }
          }
        }
      ]
    }
  }
}
